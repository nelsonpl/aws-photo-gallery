AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Globals:
  Api:
    Cors: 
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
      AllowOrigin: "'*'"
      AllowCredentials: "'true'"

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      BinaryMediaTypes:
            - "*~1*"
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: build/lambda_functions/uploadImage.handler
      Runtime: nodejs20.x
      Timeout: 120
      Policies:
        - AmazonS3FullAccess
      Environment:
        Variables:
          BUCKET_NAME: BUCKET_NAME
      Events:
        UploadImageApi:
          Type: Api
          Properties:
            Path: /uploadImage
            Method: post
            RestApiId:
              Ref: ApiGatewayApi

  ViewImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: build/lambda_functions/viewImage.handler
      Runtime: nodejs20.x
      Timeout: 120
      Policies:
        - AmazonS3ReadOnlyAccess
      Environment:
        Variables:
          BUCKET_NAME: BUCKET_NAME
      Events:
        ViewImageApi:
          Type: Api
          Properties:
            Path: /viewImage
            Method: get
            # RestApiId:
            #   Ref: ApiGatewayApi

  DeleteImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: build/lambda_functions/deleteImage.handler
      Runtime: nodejs20.x
      Timeout: 120
      Policies:
        - AmazonS3FullAccess
      Environment:
        Variables:
          BUCKET_NAME: BUCKET_NAME
      Events:
        DeleteImageApi:
          Type: Api
          Properties:
            Path: /deleteImage
            Method: delete
            # RestApiId:
            #   Ref: ApiGatewayApi

  SavePhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: build/lambda_functions/savePhoto.handler
      Runtime: nodejs20.x
      Timeout: 120
      Policies:
        - AmazonDynamoDBFullAccess 
      Environment:
        Variables:
          TABLE_NAME: TABLE_NAME
          BUCKET_NAME: BUCKET_NAME
      Events:
        SavePhotoApi:
          Type: Api
          Properties:
            Path: /savePhoto
            Method: post
            # RestApiId:
            #   Ref: ApiGatewayApi

  ListPhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: build/lambda_functions/listPhoto.handler
      Runtime: nodejs20.x
      Timeout: 120
      Policies:
        - AmazonDynamoDBFullAccess 
      Environment:
        Variables:
          TABLE_NAME: TABLE_NAME
      Events:
        ListPhotoApi:
          Type: Api
          Properties:
            Path: /listPhoto
            Method: get
            # RestApiId:
            #   Ref: ApiGatewayApi
  
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: BUCKET_NAME

  PhotosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TABLE_NAME
      AttributeDefinitions:
        - AttributeName: photoId
          AttributeType: S
      KeySchema:
        - AttributeName: photoId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  ImageBucketName:
    Value: BUCKET_NAME
